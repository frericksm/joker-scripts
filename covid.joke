#!/usr/bin/env joker
(ns covid
  (:require [joker.tools.cli :as cli]
            [joker.os :as os]
            [joker.csv :as csv]
            [joker.time :as t]
            [joker.http :as h]
            [joker.math :as m]
            [joker.strconv :refer [atoi]]))
(def usage "Usage: covid OPTIONS country-name-regex\nSample: covid 'German.*'")
(def opts
  [["-c" "--countries" "List countries matching regex"]
   ["-t" "--timeseries" "Shows timeseries added  up for matching countries"]
   ["-d" "--date DATE" "Calculations seen from DATE"]
   ["-l" "--look-back DAYS" "List calculations for the last DAYS" :default 1 :parse-fn atoi]
   ["-v" "--verbose" "verbose "]
   ["-m" "--mortal" "Show mortality changing rates"]
   ["-h" "--help" "calculates changing  rates of covid-19 cases  for number of comfirmed cases or deaths"]])
(defn show-options
  [summary errors]
  (println usage)
  (println summary)
  (when errors
    (println "\nErrors:")
    (run! println errors)))
(defn debug [msg o]
  (do (println msg o) o))
;;;;;;;;;;;;
(def url-confirmed "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
(def url-deaths  "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv")
(def url-uid-lookup "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv")

(defn fetch-data
  "Retrieves data from Johns Hopkins university via github"
  [url]
  (as->
      (h/send {:url url}) x
    (:body x)))

(defn population-map 
  "Antwortet mit einer Map die das Land auf die Grösse der Bevölkerung abbildet."
  []
  (as-> (fetch-data url-uid-lookup) x
(csv/csv-seq x)
(drop 1 x)
(reduce (fn [a v] ( assoc a (nth v 10) (nth v 11))) nil  x)))

(defn population
  "Reads all data rows where the  name of the country matches a regex in string form and summs the Population"
  [population-map country]
  (let  [p (re-pattern country)]
    (as-> population-map x
      (filter (fn [r] (re-matches p (nth r 0 ))) x) ;; filter country
      (map second x)                                ;; map on second
      (map joker.string/trim x)                     ;; trim
      (filter (fn [s] (not= "" s)) x)               ;; Entferne Leerstrings
      (map bigint x)                                ;; int
      (apply + x)                                   ;; sum
      )))

(defn all-data
  [url]
  (as-> (fetch-data url) x
    (csv/csv-seq x)))

(def YYYY-MM-DD  "2006-01-02")
(def MDY "1/2/06")
(defn parse-date [t layout]
  (t/parse layout t))
(defn format-date [t layout]
  (t/format t layout))
(defn convert-date-string [d]
  (as-> (t/parse MDY d) x))
(defn  data-headers
  [all-data]
  (as-> all-data x
    (first x)
    (drop 4 x)
    (map convert-date-string x)))
(defn headers
  [all-data]
  (as-> all-data x
    (first x)
    (concat
     (take 4 x)
     (map convert-date-string (drop 4 x)))))
(defn  to-num
  "convert seq of strings  to seq  of bigint"
  [r]
  (as-> r x
    (map bigint x)
    (map int x)))
(defn sum-columns
  "take a seq of seq and return a seq where the element at  position n ist the sum of each nth element"
  [data-rows]
  (as-> data-rows x
    (cons (repeat 0) x)
    (reduce (fn [a r] (map + a (to-num r))) x)))
(defn find-countries
  "find countries whose names match the pattern given as string"
  [all-data pattern]
 (let  [p (re-pattern pattern)]
    (as-> all-data x
      (drop 1 x )                                   ;; drop header row
      (filter (fn [r] (re-matches p (nth r 1 ))) x) ;; filter country names in column 1
      (map (fn [r] (nth r 1)) x)
      (set x)
      (sort x))))
(defn data-country
  "Reads all data rows where the  name of the country matches a regex in string form"
  [all-data country]
  (let  [p (re-pattern country)]
    (as-> all-data x
      (drop 1 x )                                   ;; drop header row
      (filter (fn [r] (re-matches p (nth r 1 ))) x) ;; filter country
      (map (partial drop 4) x)                      ;; drop first 4 columns
      )))

(defn data-map-country
  "Takes a pattern as string and returns the summed up data of all matching counties"
  [all-data country]
  (as-> (data-country all-data country) x
    (sum-columns x)
    (zipmap ( data-headers all-data) x)
    (sort-by first x)
    ))
(defn rate
  [z n]
  (double (if (or (nil? n) (= n 0)) 0  (/ (if (nil? z) 0 z) n))))

(defn fmt [num]
  (format "%.2f" num))

(defn neu-infektionen-per100k 
"Antwortet mit der Anzahl von cases je 100000 Einwohner"
[cases-start cases-end population] 
  (fmt (* (/ 1.0 population) 100000.0 (- cases-end cases-start ))))

(defn calc2
  "Calc some derived information"
  [data population date-as-t]
  (let [data-as-map (into {} data)
        day-0 date-as-t
        day-1 (t/add-date day-0 0 0 -1)
        day-3 (t/add-date day-0 0 0 -3)
        day-7 (t/add-date day-0 0 0 -7)
        day-14 (t/add-date day-0 0 0 -14)
        cases-day-0 (get data-as-map day-0)
        cases-day-1 (get data-as-map day-1)
        cases-day-3 (get data-as-map day-3)
        cases-day-7 (get data-as-map day-7)
        cases-day-14 (get data-as-map day-14)
        rate-1-day   (rate cases-day-0 cases-day-1)
        rate-3-days  (rate cases-day-0 cases-day-3)
        rate-7-days  (rate cases-day-0 cases-day-7)
        rate-14-days (rate cases-day-0 cases-day-14)
        population population
        new-cases-within-7-days-per-100k (neu-infektionen-per100k cases-day-7 cases-day-0 population)
;;neu-infektionen-pro-100000 population
        ;;neu-infektionen-pro-100000 (fmt (* 1/80000000 100000.0 (- (get data-as-map day-0)(get data-as-map day-1))))
        doubling-rate-in-days (fmt (/ (m/log 2.0) (m/log rate-1-day)))]
    {:timeseries data
     :date (format-date day-0 YYYY-MM-DD)
     :cases cases-day-0
;;     :doubling-rate-in-days doubling-rate-in-days
     ;;:neu-infektionen-pro-100000 neu-infektionen-pro-100000
     ;;:population  population
     :new-cases-within-7-days-per-100k new-cases-within-7-days-per-100k
     :rate-1-day (fmt rate-1-day)
     :rate-3-days (fmt rate-3-days)
     :rate-7-days (fmt rate-7-days)
     :rate-14-days (fmt rate-14-days)}))
(defn calc
  "Calc some derived information"
  [data date look-back population]
  (let [date-as-t (if (not (nil? date)) (parse-date date YYYY-MM-DD) (first (last data)))
        date-range (as-> look-back x
            (range x)
(map (fn [i] (t/add-date date-as-t  0 0 (* -1 i))) x))]
 (map  (partial  calc2 data population) date-range)))

(defn start "Calculating infection rate"
  [all-data countries country date look-back timeseries verbose mortal population-map]
  (if (and verbose (> (count countries) 1))
    (println (format  "You get the sums for the countries %s. Choose one of them to get the results for that country only." countries)))
  (println (format "start: Calculating %s rate of %s: " (if mortal "mortal" "confirmed" ) (if (<= (count countries) 1) countries "more than one country (use option -c).")))
  (let [data (data-map-country all-data country)
        population (population population-map country)
        result (calc data date look-back population)]
    (cond  timeseries
           (println (map :timeseries result))
           :else
           (pprint (map (fn [r] (dissoc r :timeseries )) result))))
  (println "Done"))
;; Entrypoint
(let [{:keys [options summary errors arguments]} (cli/parse-opts *command-line-args* opts)
      {:keys [help version ]} options
      countries? (:countries options)
      timeseries? (:timeseries options)
      verbose? (:verbose options)
      mortal? (:mortal options)
      date-option (:date options)
      look-back (:look-back options)
      country (or (first arguments) ".*")
      url (if mortal? url-deaths url-confirmed)
      all-data (all-data url)
      countries (find-countries all-data country)]
  (println options arguments)
  (cond
    errors
    (do
      (show-options summary errors)
      (os/exit -1))
    help
    (show-options summary nil)
    countries?
    (println countries)
    version
    (println "version: " version)
    :else
    (do
      (start all-data countries  country date-option look-back timeseries? verbose? mortal? (population-map))
      )))

